library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
shiny::runApp()
library("shiny")
library("ggplot2")
runApp()
runApp()
head(data)
runApp()
runApp()
data <- read.csv("C:/Users/Ayushman Singh/Downloads/NEO Earth Close Approaches.csv")
head(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('backup.R')
runApp('backup.R')
install.packages("pheatmap")
install.packages("pheatmap")
install.packages("treemap")
install.packages("plotly")
# Install required packages if not installed
install.packages("pheatmap")
# Load necessary libraries
library(pheatmap)
library(treemap)
library(plotly)
# Create the asteroid dataset
asteroid_data <- data.frame(
Name = c("(1036) Ganymed", "(433) Eros", "(3122) Florence", "(1866) Sisyphus", "(4179) Toutatis"),
Diameter_km = c(35.6, 16.84, 4.9, 8.5, 2.52),
Mass_kg = c(6.5e16, 6.687e15, 7.0e12, 1.7e15, 5.0e12),
Semi_Major_Axis_km = c(397936000, 218416000, 264792000, 282744000, 376992000),
Closest_Approach_km = c(53856000, 22440000, 7031200, 16456000, 897600)
)
# 1. Heatmap
# Remove name for heatmap and normalize data
asteroid_matrix <- as.matrix(asteroid_data[, -1]) # Exclude the "Name" column
asteroid_matrix <- scale(asteroid_matrix)         # Normalize data (Z-score standardization)
# Create a heatmap
pheatmap(asteroid_matrix, labels_row = asteroid_data$Name,
main = "Heatmap of Asteroid Data",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
# 2. Tree Map
# Prepare the dataset for the treemap
treemap_data <- data.frame(
Name = asteroid_data$Name,
Diameter_km = asteroid_data$Diameter_km,
Mass_kg = asteroid_data$Mass_kg
)
# Create a treemap with diameter and mass
treemap(treemap_data,
index = "Name",         # Names of asteroids as labels
vSize = "Diameter_km",  # Size of the rectangles based on diameter
vColor = "Mass_kg",     # Color based on the mass of asteroids
type = "value",         # Color gradient type
title = "Tree Map of Asteroids (Diameter and Mass)",
palette = "Blues")
# 3. Interactive Scatter Plot (Mass vs Diameter)
# Create an interactive scatter plot for Mass vs Diameter
p <- plot_ly(asteroid_data, x = ~Diameter_km, y = ~Mass_kg, type = 'scatter', mode = 'markers',
text = ~Name, marker = list(size = 10, color = 'purple')) %>%
layout(title = "Interactive Plot of Mass vs Diameter of Asteroids",
xaxis = list(title = "Diameter (km)"),
yaxis = list(title = "Mass (kg)"))
# Display the interactive plot
p
# Create the dataset
asteroid_data <- data.frame(
Name = c("(1036) Ganymed", "(433) Eros", "(3122) Florence", "(1866) Sisyphus", "(4179) Toutatis"),
Diameter_km = c(35.6, 16.84, 4.9, 8.5, 2.52),
Mass_kg = c(6.5e16, 6.687e15, 7.0e12, 1.7e15, 5.0e12),
Semi_Major_Axis_km = c(397936000, 218416000, 264792000, 282744000, 376992000),
Closest_Approach_km = c(53856000, 22440000, 7031200, 16456000, 897600)
)
# 1. Bar Chart for Diameter
barplot(asteroid_data$Diameter_km, names.arg = asteroid_data$Name, col = "skyblue",
main = "Diameters of Asteroids", xlab = "Asteroid Name", ylab = "Diameter (km)", las = 2)
# 2. Line Chart for Semi-Major Axis
plot(asteroid_data$Semi_Major_Axis_km, type = "o", col = "blue", xaxt = "n",
main = "Semi-Major Axis of Asteroids", xlab = "Asteroid", ylab = "Semi-Major Axis (km)")
axis(1, at = 1:length(asteroid_data$Name), labels = asteroid_data$Name, las = 2)
# 3. Scatter Plot for Mass vs Diameter
plot(asteroid_data$Diameter_km, asteroid_data$Mass_kg, col = "purple", pch = 16, cex = 1.5,
main = "Mass vs Diameter of Asteroids", xlab = "Diameter (km)", ylab = "Mass (kg)")
# 1. Bar Chart for Diameter
barplot(asteroid_data$Diameter_km, names.arg = asteroid_data$Name, col = "skyblue",
main = "Diameters of Asteroids", xlab = "Asteroid Name", ylab = "Diameter (km)", las = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Load necessary libraries
library(pheatmap)
library(treemap)
library(plotly)
# Create the asteroid dataset
asteroid_data <- data.frame(
Name = c("(1036) Ganymed", "(433) Eros", "(3122) Florence", "(1866) Sisyphus", "(4179) Toutatis"),
Diameter_km = c(35.6, 16.84, 4.9, 8.5, 2.52),
Mass_kg = c(6.5e16, 6.687e15, 7.0e12, 1.7e15, 5.0e12),
Semi_Major_Axis_km = c(397936000, 218416000, 264792000, 282744000, 376992000),
Closest_Approach_km = c(53856000, 22440000, 7031200, 16456000, 897600)
)
# 1. Heatmap
# Remove name for heatmap and normalize data
asteroid_matrix <- as.matrix(asteroid_data[, -1]) # Exclude the "Name" column
asteroid_matrix <- scale(asteroid_matrix)         # Normalize data (Z-score standardization)
# Create a heatmap
pheatmap(asteroid_matrix, labels_row = asteroid_data$Name,
main = "Heatmap of Asteroid Data",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
# 2. Tree Map
# Prepare the dataset for the treemap
treemap_data <- data.frame(
Name = asteroid_data$Name,
Diameter_km = asteroid_data$Diameter_km,
Mass_kg = asteroid_data$Mass_kg
)
# Create a treemap with diameter and mass
treemap(treemap_data,
index = "Name",         # Names of asteroids as labels
vSize = "Diameter_km",  # Size of the rectangles based on diameter
vColor = "Mass_kg",     # Color based on the mass of asteroids
type = "value",         # Color gradient type
title = "Tree Map of Asteroids (Diameter and Mass)",
palette = "Blues")
# 3. Interactive Scatter Plot (Mass vs Diameter)
# Create an interactive scatter plot for Mass vs Diameter
p <- plot_ly(asteroid_data, x = ~Diameter_km, y = ~Mass_kg, type = 'scatter', mode = 'markers',
text = ~Name, marker = list(size = 10, color = 'purple')) %>%
layout(title = "Interactive Plot of Mass vs Diameter of Asteroids",
xaxis = list(title = "Diameter (km)"),
yaxis = list(title = "Mass (kg)"))
)
View(p)
View(asteroid_data)
View(asteroid_matrix)
# 1. Heatmap
# Remove name for heatmap and normalize data
asteroid_matrix <- as.matrix(asteroid_data[, -1]) # Exclude the "Name" column
asteroid_matrix <- scale(asteroid_matrix)         # Normalize data (Z-score standardization)
# Create a heatmap
pheatmap(asteroid_matrix, labels_row = asteroid_data$Name,
main = "Heatmap of Asteroid Data",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
shiny::runApp()
# Load necessary libraries
library(rgl)
library(dplyr)
# Load your dataset
data <- read.csv("C:/Users/Ayushman/Desktop/NEO Earth Close Approaches.csv")
# Load necessary libraries
library(rgl)
library(dplyr)
# Load your dataset
data <- read.csv("C:/Users/Ayushman Singh/Downloads/NEO Earth Close Approaches.csv")
# Ensure the dataset has necessary numeric columns for plotting
# Here, I'm assuming `min_distance`, `velocity_km_s`, and `close_approach_date` as example columns
# Convert date to a numeric value (if you want to use date in the plot)
data$close_approach_date <- as.Date(data$close_approach_date)
# Load necessary libraries
library(rgl)
library(dplyr)
# Load your dataset
data <- read.csv("C:/Users/Ayushman Singh/Downloads/NEO Earth Close Approaches.csv")
# Ensure the dataset has necessary numeric columns for plotting
# Here, I'm assuming `min_distance`, `velocity_km_s`, and `close_approach_date` as example columns
# Convert date to a numeric value (if you want to use date in the plot)
data$close_approach_date <- as.Date(data$close_approach_date)
# Load necessary libraries
library(rgl)
library(dplyr)
# Load the dataset
data <- read.csv("C:/Users/Ayushman Singh/Downloads/NEO Earth Close Approaches.csv")
# Check the structure of the dataset
str(data)
# If the 'close_approach_date' column is in a valid date format, you can convert it
# Assuming 'close_approach_date' is in a proper format
data$close_approach_date <- as.Date(data$close_approach_date, format = "%Y-%m-%d")  # Adjust format if necessary
# Load necessary libraries
library(rgl)
library(dplyr)
# Load the dataset
data <- read.csv("C:/Users/Ayushman Singh/Downloads/NEO Earth Close Approaches.csv")
# Check for missing or incorrect data in 'min_distance' and 'velocity_km_s' columns
summary(data)
# Clean the dataset (remove rows with missing or non-numeric values in necessary columns)
data_clean <- data %>%
filter(!is.na(min_distance), !is.na(velocity_km_s)) %>%  # Remove rows with missing values
filter(is.numeric(min_distance), is.numeric(velocity_km_s))  # Ensure the columns are numeric
# Load necessary libraries
library(rgl)
library(dplyr)
# Hardcoded sample dataset with 5 rows
data_clean <- data.frame(
Name = c("Asteroid1", "Asteroid2", "Asteroid3", "Asteroid4", "Asteroid5"),
min_distance = c(0.05, 0.1, 0.02, 0.07, 0.03),    # Example minimum distances (in AU)
velocity_km_s = c(25.3, 18.7, 22.1, 30.5, 27.4)    # Example velocities (in km/s)
)
# Check the structure of the hardcoded data
head(data_clean)
# Create a 3D scatter plot using 'min_distance' and 'velocity_km_s'
# We'll use 'min_distance' for x-axis, 'velocity_km_s' for y-axis, and use an index (row number) for z-axis
plot3d(data_clean$min_distance, data_clean$velocity_km_s, seq_along(data_clean$min_distance),
col = "blue", size = 5, type = "s",
xlab = "Minimum Distance (AU)", ylab = "Velocity (km/s)", zlab = "Index")
# Load necessary libraries
library(rgl)
library(dplyr)
# Hardcoded sample dataset with 5 rows
data_clean <- data.frame(
Name = c("Asteroid1", "Asteroid2", "Asteroid3", "Asteroid4", "Asteroid5"),
min_distance = c(0.05, 0.1, 0.02, 0.07, 0.03),    # Example minimum distances (in AU)
velocity_km_s = c(25.3, 18.7, 22.1, 30.5, 27.4)    # Example velocities (in km/s)
)
# Check the structure of the hardcoded data
head(data_clean)
# Create a 3D scatter plot using 'min_distance' and 'velocity_km_s'
# We'll use 'min_distance' for x-axis, 'velocity_km_s' for y-axis, and use an index (row number) for z-axis
plot3d(data_clean$min_distance, data_clean$velocity_km_s, seq_along(data_clean$min_distance),
col = "blue", size = 5, type = "s",
xlab = "Minimum Distance (AU)", ylab = "Velocity (km/s)", zlab = "Index")
plot3d(data_clean$min_distance, data_clean$velocity_km_s, seq_along(data_clean$min_distance),
col = "blue", size = 5, type = "s",
xlab = "Minimum Distance (AU)", ylab = "Velocity (km/s)", zlab = "Index")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
